{
  "ðŸŸ¨ jsxWrap": {
    "prefix": "_rFrag.$_rFrag._frag._jsxFrag",
    "body": [
      "<$1$0>",
      "\t$TM_SELECTED_TEXT",
      "</$1>"
    ],
    "description": "Wrap component with Fragment",
    "scope": "astro"
  },
  "ðŸŸ¨ jsxIf": {
    "prefix": "_rIf.$_rIf._jsxIf",
    "body": [
      "{${1:condition} ? (",
      "\t$TM_SELECTED_TEXT",
      ") : (",
      "\t${0:null}",
      ")}"
    ],
    "description": "Wrap in if",
    "scope": "astro"
  },
  "ðŸŸ¨ jsxIfWithFragment": {
    "prefix": "_rIfFrag.$_rIfFrag._jsxIfFrag",
    "body": [
      "{${1:condition} ? (",
      "\t<>",
      "\t\t$TM_SELECTED_TEXT",
      "\t</>",
      ") : (",
      "\t${0:null}",
      ")}"
    ],
    "description": "Wrap in if",
    "scope": "astro"
  },
  "ðŸŸ¨ jsxElse": {
    "prefix": "_rEl.$_rEl._jsxEl",
    "body": [
      "{${1:condition} ? (",
      "\t${0:null}",
      ") : (",
      "\t$TM_SELECTED_TEXT",
      ")}"
    ],
    "description": "Wrap in else",
    "scope": "astro"
  },
  "ðŸŸ¨ jsxElseWithFragment": {
    "prefix": "_rElFrag.$_rElFrag._jsxElFrag",
    "body": [
      "{${1:condition} ? (",
      "\t${0:null}",
      ") : (",
      "\t<>",
      "\t\t$TM_SELECTED_TEXT",
      "\t</>",
      ")}"
    ],
    "description": "Wrap in else",
    "scope": "astro"
  },
  "ðŸŸ¨ jsxConditional": {
    "prefix": "_rCond.$_rCond._jsxCond",
    "body": [
      "{${1:condition} && (",
      "\t$TM_SELECTED_TEXT",
      ")}"
    ],
    "description": "Wrap with conditional",
    "scope": "astro"
  },
  "ðŸŸ¨ jsxConditionalWithFragment": {
    "prefix": "_rCondFrag.$_rCondFrag._jsxCondFrag",
    "body": [
      "{${1:condition} && (",
      "\t<>",
      "\t\t$TM_SELECTED_TEXT",
      "\t</>",
      ")}"
    ],
    "description": "Wrap with conditional",
    "scope": "astro"
  },
  "ðŸŸ¨ jsxInnerHTML": {
    "prefix": "innerHTML.$innerHTML.dangerously",
    "body": [
      "<${1:div} dangerouslySetInnerHTML={{ __html: $2 }} />"
    ],
    "description": "Create element with `dangerouslySetInnerHTML` prop",
    "scope": "astro"
  },
  "ðŸŸ¨ jsxButton": {
    "prefix": "button.$button",
    "body": [
      "<button type=\"button\" onClick={${2:onClick}}$3>",
      "\t${1:Button}",
      "</button>"
    ],
    "description": "Create `<button />` element",
    "scope": "astro"
  },
  "ðŸŸ¨ jsxLoop": {
    "prefix": "loopJSX.$loopJSX",
    "body": [
      "{${1:list}.map((${2:$1Item}) => {$5",
      "\treturn (",
      "\t\t<${4:div} key={${2:$1Item}.${3:id}}>$0</$4>",
      "\t)",
      "})}"
    ],
    "description": "JSX mapping an array",
    "scope": "astro"
  }
}